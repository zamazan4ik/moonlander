#pragma once

#ifndef CUSTOM_SAFE_RANGE
  #error "You must specify variable CUSTOM_SAFE_RANGE for custom .XCompose keycodes."
#endif

enum custom_xcompose_keycodes {
  CUSTOM_XCOMPOSE_START = CUSTOM_SAFE_RANGE,

  // Letter modifiers
  AC_GRV,  // `
  AC_ACT,  // '
  AC_CIRC, // ^
  AC_TILD, // ~

  // Number modifiers
  AC_SUB,  // _
  AC_SUP,  // ^
  AC_CRCL, // (

  // Greek symbols
  XC_MU,   // ¬µ
  XC_LMBD, // Œª
  XC_PI,   // œÄ

  // Math
  XC_NIN,  // ‚àâ
  XC_IN,   // ‚àà
  XC_SBST, // ‚äÇ
  XC_ANGL, // ‚à†
  XC_IFAI, // ‚áî
  XC_EXST, // ‚àÉ
  XC_ALL,  // ‚àÄ
  XC_THEN, // ‚áí
  XC_PLMN, // ¬±
  XC_DEGR, // ¬∞
  XC_APRX, // ‚âà
  XC_EMPT, // ‚àÖ
  XC_TIMS, // √ó
  XC_NEQ,  // ‚â†
  XC_INF,  // ‚àû

  // Arrows
  XC_LEFT, // ‚Üê
  XC_DOWN, // ‚Üì
  XC_UP,   // ‚Üë
  XC_RGHT, // ‚Üí

  // Other symbols
  XC_LTRE, // ¬´
  XC_RTRE, // ¬ª
  XC_BTRE, // ¬´¬ª‚óÄÔ∏è
  XC_DASH, // ‚Äî
  XC_BULL, // ‚Ä¢
  XC_LCRN, // ‚åú
  XC_RCRN, // ‚åü
  XC_BCRN, // ‚åú‚åü‚óÄÔ∏è
  XC_MUSC, // ‚ô™
  XC_TM,   // ‚Ñ¢
  XC_COPY, // ¬©

  // Emojis
  XC_CRSS, // ‚ùå
  XC_DONE, // ‚úÖ
  XC_SPRK, // ‚ú®
  XC_TMBU, // üëç
  XC_TMBD, // üëé

  CUSTOM_XCOMPOSE_NEW_SAFE_RANGE,
  #undef CUSTOM_SAFE_RANGE
  #define CUSTOM_SAFE_RANGE CUSTOM_XCOMPOSE_NEW_SAFE_RANGE
};

// –ú–æ–∏ —è–∑—ã–∫–æ-—Å–∏–º–≤–æ–ª—å–Ω—ã–µ –∫–ª–∞–≤–∏—à–∏
// My lang-symbolic buttons
bool process_my_xcompose(uint16_t keycode, keyrecord_t *record) {
  #define PRESS(X) tap_code16(X);
  #define COMPOSE PRESS(KC_SLCK)
  #define CASE_PROCESS(WHAT, DO) case WHAT: if (record->event.pressed) { COMPOSE DO } return false; break;
  #define XC_PROCESS(WHAT, ...) CASE_PROCESS(WHAT, MAP(TO_NUM, __VA_ARGS__) PRESS(KC_9))
  #define TO_NUM(x) PRESS(KC_ ## x)

  // English-specific codes
  switch (keycode) {
    // Letter modifiers
    CASE_PROCESS(AC_GRV, PRESS(KC_GRV))  // `
    CASE_PROCESS(AC_ACT, PRESS(KC_QUOT))  // '
    CASE_PROCESS(AC_CIRC, PRESS(KC_CIRC)) // ^
    CASE_PROCESS(AC_TILD, PRESS(KC_TILD)) // ~

    // Number modifiers
    CASE_PROCESS(AC_SUB, PRESS(KC_UNDS))  // _
    CASE_PROCESS(AC_SUP, PRESS(KC_SLSH))  // ^
    CASE_PROCESS(AC_CRCL, PRESS(KC_LPRN)) // (

    // Greek symbols
    XC_PROCESS(XC_MU, 0, 1)   // ¬µ
    XC_PROCESS(XC_LMBD, 0, 2) // Œª
    XC_PROCESS(XC_PI, 0, 3)   // œÄ

    // Math
    XC_PROCESS(XC_NIN, 0, 4)  // ‚àâ
    XC_PROCESS(XC_IN, 0, 5)   // ‚àà
    XC_PROCESS(XC_SBST, 0, 6) // ‚äÇ
    XC_PROCESS(XC_ANGL, 0, 7) // ‚à†
    XC_PROCESS(XC_IFAI, 0, 8) // ‚áî
    XC_PROCESS(XC_EXST, 0, 9) // ‚àÉ
    XC_PROCESS(XC_ALL, 1, 0)  // ‚àÄ
    XC_PROCESS(XC_THEN, 1, 1) // ‚áí
    XC_PROCESS(XC_PLMN, 1, 2) // ¬±
    XC_PROCESS(XC_DEGR, 1, 3) // ¬∞
    XC_PROCESS(XC_APRX, 1, 4) // ‚âà
    XC_PROCESS(XC_EMPT, 1, 5) // ‚àÖ
    XC_PROCESS(XC_TIMS, 1, 6) // √ó
    XC_PROCESS(XC_NEQ, 1, 7)  // ‚â†
    XC_PROCESS(XC_INF, 1, 8)  // ‚àû

    // Arrows
    XC_PROCESS(XC_LEFT, 1, 9) // ‚Üê
    XC_PROCESS(XC_DOWN, 2, 0) // ‚Üì
    XC_PROCESS(XC_UP, 2, 1)   // ‚Üë
    XC_PROCESS(XC_RGHT, 2, 2) // ‚Üí

    // Other symbols
    XC_PROCESS(XC_LTRE, 2, 3) // ¬´
    XC_PROCESS(XC_RTRE, 2, 4) // ¬ª
    CASE_PROCESS(XC_BTRE, PRESS(KC_2) PRESS(KC_3) PRESS(KC_9) COMPOSE PRESS(KC_2) PRESS(KC_4) PRESS(KC_9)  PRESS(KC_LEFT)) // ¬´¬ª‚óÄÔ∏è
    XC_PROCESS(XC_DASH, 2, 5) // ‚Äî
    XC_PROCESS(XC_BULL, 2, 6) // ‚Ä¢
    XC_PROCESS(XC_LCRN, 2, 7) // ‚åú
    XC_PROCESS(XC_RCRN, 2, 8) // ‚åü
    CASE_PROCESS(XC_BCRN, PRESS(KC_2) PRESS(KC_7) PRESS(KC_9) COMPOSE PRESS(KC_2) PRESS(KC_8) PRESS(KC_9) PRESS(KC_LEFT)) // ‚åú‚åü‚óÄÔ∏è
    XC_PROCESS(XC_MUSC, 2, 9) // ‚ô™
    XC_PROCESS(XC_TM, 3, 0)   // ‚Ñ¢
    XC_PROCESS(XC_COPY, 3, 1) // ¬©

    // Emojis
    XC_PROCESS(XC_CRSS, 3, 2) // ‚ùå
    XC_PROCESS(XC_DONE, 3, 3) // ‚úÖ
    XC_PROCESS(XC_SPRK, 3, 4) // ‚ú®
    XC_PROCESS(XC_TMBU, 3, 5) // üëç
    XC_PROCESS(XC_TMBD, 3, 6) // üëé
  }
  return true;
}
